class Solution {
  public:
    vector<int> search(string& pat, string& txt) {
         vector<int>ans;
         int n=txt.size();
          int m=pat.size();
            if(n<m){
                return {-1};
            }
            for(int i=0;i<n-m+1;i++){
                if(txt[i]==pat[0]){
                    if(txt.substr(i,m)==pat){
                        ans.push_back(i);
                    }
                }
            }
             return ans;
        }



      // solution by lsp method 
    
//     int k = pat.size();
//     vector<int>lps(k,0),res;;
//        for(int i=1,len=0;i<k;){
//            if(pat[i]==pat[len]) lps[i++]=++len;
//           else if(len) len=lps[len-1];
//            else lps[i++]=0;
//        }
//        
//        for(int i=0,j=0;i<txt.size();){
//           if(txt[i]==pat[j]){
//                i++,j++;
//                if(j==k){
//                   res.push_back(i-j);
//                    j=lps[j-1];
//               }
//            }
//            else if(j)
//                j=lps[j-1];
//            else
//               i++;
//        }
//        return res;
//     }


    };
